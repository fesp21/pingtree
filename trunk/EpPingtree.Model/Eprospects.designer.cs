#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpPingtree.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EpPingtree")]
	public partial class EprospectsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBilling(Billing instance);
    partial void UpdateBilling(Billing instance);
    partial void DeleteBilling(Billing instance);
    partial void InsertBillingType(BillingType instance);
    partial void UpdateBillingType(BillingType instance);
    partial void DeleteBillingType(BillingType instance);
    partial void InsertBuyer(Buyer instance);
    partial void UpdateBuyer(Buyer instance);
    partial void DeleteBuyer(Buyer instance);
    partial void InsertLeadBought(LeadBought instance);
    partial void UpdateLeadBought(LeadBought instance);
    partial void DeleteLeadBought(LeadBought instance);
    partial void InsertLeadRejected(LeadRejected instance);
    partial void UpdateLeadRejected(LeadRejected instance);
    partial void DeleteLeadRejected(LeadRejected instance);
    partial void InsertSeller(Seller instance);
    partial void UpdateSeller(Seller instance);
    partial void DeleteSeller(Seller instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertLead(Lead instance);
    partial void UpdateLead(Lead instance);
    partial void DeleteLead(Lead instance);
    #endregion
		
		public EprospectsDataContext() : 
				base(global::EpPingtree.Model.Properties.Settings.Default.EpPingtreeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EprospectsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EprospectsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EprospectsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EprospectsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Billing> Billings
		{
			get
			{
				return this.GetTable<Billing>();
			}
		}
		
		public System.Data.Linq.Table<BillingType> BillingTypes
		{
			get
			{
				return this.GetTable<BillingType>();
			}
		}
		
		public System.Data.Linq.Table<Buyer> Buyers
		{
			get
			{
				return this.GetTable<Buyer>();
			}
		}
		
		public System.Data.Linq.Table<LeadBought> LeadBoughts
		{
			get
			{
				return this.GetTable<LeadBought>();
			}
		}
		
		public System.Data.Linq.Table<LeadRejected> LeadRejecteds
		{
			get
			{
				return this.GetTable<LeadRejected>();
			}
		}
		
		public System.Data.Linq.Table<Seller> Sellers
		{
			get
			{
				return this.GetTable<Seller>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Lead> Leads
		{
			get
			{
				return this.GetTable<Lead>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Billing")]
	public partial class Billing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillingId;
		
		private int _BillingTypeId;
		
		private int _SellerId;
		
		private int _BuyerId;
		
		private decimal _Value;
		
		private EntityRef<BillingType> _BillingType;
		
		private EntityRef<Buyer> _Buyer;
		
		private EntityRef<Seller> _Seller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingIdChanging(int value);
    partial void OnBillingIdChanged();
    partial void OnBillingTypeIdChanging(int value);
    partial void OnBillingTypeIdChanged();
    partial void OnSellerIdChanging(int value);
    partial void OnSellerIdChanged();
    partial void OnBuyerIdChanging(int value);
    partial void OnBuyerIdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public Billing()
		{
			this._BillingType = default(EntityRef<BillingType>);
			this._Buyer = default(EntityRef<Buyer>);
			this._Seller = default(EntityRef<Seller>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillingId
		{
			get
			{
				return this._BillingId;
			}
			set
			{
				if ((this._BillingId != value))
				{
					this.OnBillingIdChanging(value);
					this.SendPropertyChanging();
					this._BillingId = value;
					this.SendPropertyChanged("BillingId");
					this.OnBillingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingTypeId", DbType="Int NOT NULL")]
		public int BillingTypeId
		{
			get
			{
				return this._BillingTypeId;
			}
			set
			{
				if ((this._BillingTypeId != value))
				{
					if (this._BillingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BillingTypeId = value;
					this.SendPropertyChanged("BillingTypeId");
					this.OnBillingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="Int NOT NULL")]
		public int SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					if (this._Seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int NOT NULL")]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					if (this._Buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,0) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingType_Billing", Storage="_BillingType", ThisKey="BillingTypeId", OtherKey="BillingTypeId", IsForeignKey=true)]
		public BillingType BillingType
		{
			get
			{
				return this._BillingType.Entity;
			}
			set
			{
				BillingType previousValue = this._BillingType.Entity;
				if (((previousValue != value) 
							|| (this._BillingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingType.Entity = null;
						previousValue.Billings.Remove(this);
					}
					this._BillingType.Entity = value;
					if ((value != null))
					{
						value.Billings.Add(this);
						this._BillingTypeId = value.BillingTypeId;
					}
					else
					{
						this._BillingTypeId = default(int);
					}
					this.SendPropertyChanged("BillingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Billing", Storage="_Buyer", ThisKey="BuyerId", OtherKey="BuyerId", IsForeignKey=true)]
		public Buyer Buyer
		{
			get
			{
				return this._Buyer.Entity;
			}
			set
			{
				Buyer previousValue = this._Buyer.Entity;
				if (((previousValue != value) 
							|| (this._Buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buyer.Entity = null;
						previousValue.Billings.Remove(this);
					}
					this._Buyer.Entity = value;
					if ((value != null))
					{
						value.Billings.Add(this);
						this._BuyerId = value.BuyerId;
					}
					else
					{
						this._BuyerId = default(int);
					}
					this.SendPropertyChanged("Buyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Billing", Storage="_Seller", ThisKey="SellerId", OtherKey="SellerId", IsForeignKey=true)]
		public Seller Seller
		{
			get
			{
				return this._Seller.Entity;
			}
			set
			{
				Seller previousValue = this._Seller.Entity;
				if (((previousValue != value) 
							|| (this._Seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seller.Entity = null;
						previousValue.Billings.Remove(this);
					}
					this._Seller.Entity = value;
					if ((value != null))
					{
						value.Billings.Add(this);
						this._SellerId = value.SellerId;
					}
					else
					{
						this._SellerId = default(int);
					}
					this.SendPropertyChanged("Seller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillingType")]
	public partial class BillingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillingTypeId;
		
		private string _Description;
		
		private EntitySet<Billing> _Billings;
		
		private EntitySet<LeadBought> _LeadBoughts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingTypeIdChanging(int value);
    partial void OnBillingTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public BillingType()
		{
			this._Billings = new EntitySet<Billing>(new Action<Billing>(this.attach_Billings), new Action<Billing>(this.detach_Billings));
			this._LeadBoughts = new EntitySet<LeadBought>(new Action<LeadBought>(this.attach_LeadBoughts), new Action<LeadBought>(this.detach_LeadBoughts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillingTypeId
		{
			get
			{
				return this._BillingTypeId;
			}
			set
			{
				if ((this._BillingTypeId != value))
				{
					this.OnBillingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BillingTypeId = value;
					this.SendPropertyChanged("BillingTypeId");
					this.OnBillingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingType_Billing", Storage="_Billings", ThisKey="BillingTypeId", OtherKey="BillingTypeId")]
		public EntitySet<Billing> Billings
		{
			get
			{
				return this._Billings;
			}
			set
			{
				this._Billings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingType_LeadBought", Storage="_LeadBoughts", ThisKey="BillingTypeId", OtherKey="BillingTypeId")]
		public EntitySet<LeadBought> LeadBoughts
		{
			get
			{
				return this._LeadBoughts;
			}
			set
			{
				this._LeadBoughts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = this;
		}
		
		private void detach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = null;
		}
		
		private void attach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = this;
		}
		
		private void detach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buyer")]
	public partial class Buyer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuyerId;
		
		private string _Name;
		
		private string _Username;
		
		private string _Password;
		
		private string _Alias;
		
		private string _EmailAddress;
		
		private string _Mobile;
		
		private string _RefKey;
		
		private System.Nullable<double> _FixedAmount;
		
		private string _Country;
		
		private string _IntegrationUrl;
		
		private bool _Active;
		
		private EntitySet<Billing> _Billings;
		
		private EntitySet<LeadBought> _LeadBoughts;
		
		private EntitySet<LeadRejected> _LeadRejecteds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuyerIdChanging(int value);
    partial void OnBuyerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnRefKeyChanging(string value);
    partial void OnRefKeyChanged();
    partial void OnFixedAmountChanging(System.Nullable<double> value);
    partial void OnFixedAmountChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnIntegrationUrlChanging(string value);
    partial void OnIntegrationUrlChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Buyer()
		{
			this._Billings = new EntitySet<Billing>(new Action<Billing>(this.attach_Billings), new Action<Billing>(this.detach_Billings));
			this._LeadBoughts = new EntitySet<LeadBought>(new Action<LeadBought>(this.attach_LeadBoughts), new Action<LeadBought>(this.detach_LeadBoughts));
			this._LeadRejecteds = new EntitySet<LeadRejected>(new Action<LeadRejected>(this.attach_LeadRejecteds), new Action<LeadRejected>(this.detach_LeadRejecteds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alias", DbType="VarChar(50)")]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(150)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefKey", DbType="VarChar(50)")]
		public string RefKey
		{
			get
			{
				return this._RefKey;
			}
			set
			{
				if ((this._RefKey != value))
				{
					this.OnRefKeyChanging(value);
					this.SendPropertyChanging();
					this._RefKey = value;
					this.SendPropertyChanged("RefKey");
					this.OnRefKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedAmount", DbType="Float")]
		public System.Nullable<double> FixedAmount
		{
			get
			{
				return this._FixedAmount;
			}
			set
			{
				if ((this._FixedAmount != value))
				{
					this.OnFixedAmountChanging(value);
					this.SendPropertyChanging();
					this._FixedAmount = value;
					this.SendPropertyChanged("FixedAmount");
					this.OnFixedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntegrationUrl", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string IntegrationUrl
		{
			get
			{
				return this._IntegrationUrl;
			}
			set
			{
				if ((this._IntegrationUrl != value))
				{
					this.OnIntegrationUrlChanging(value);
					this.SendPropertyChanging();
					this._IntegrationUrl = value;
					this.SendPropertyChanged("IntegrationUrl");
					this.OnIntegrationUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Billing", Storage="_Billings", ThisKey="BuyerId", OtherKey="BuyerId")]
		public EntitySet<Billing> Billings
		{
			get
			{
				return this._Billings;
			}
			set
			{
				this._Billings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_LeadBought", Storage="_LeadBoughts", ThisKey="BuyerId", OtherKey="BuyerId")]
		public EntitySet<LeadBought> LeadBoughts
		{
			get
			{
				return this._LeadBoughts;
			}
			set
			{
				this._LeadBoughts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_LeadRejected", Storage="_LeadRejecteds", ThisKey="BuyerId", OtherKey="BuyerId")]
		public EntitySet<LeadRejected> LeadRejecteds
		{
			get
			{
				return this._LeadRejecteds;
			}
			set
			{
				this._LeadRejecteds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = this;
		}
		
		private void detach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = null;
		}
		
		private void attach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = this;
		}
		
		private void detach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = null;
		}
		
		private void attach_LeadRejecteds(LeadRejected entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = this;
		}
		
		private void detach_LeadRejecteds(LeadRejected entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadBought")]
	public partial class LeadBought : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeadBoughtId;
		
		private int _LeadId;
		
		private int _BuyerId;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _ExchangeRate;
		
		private string _BuyerLeadReference;
		
		private string _RedirectionLink;
		
		private System.DateTime _TimeBought;
		
		private decimal _BillingValue;
		
		private System.Nullable<int> _BillingTypeId;
		
		private EntityRef<BillingType> _BillingType;
		
		private EntityRef<Buyer> _Buyer;
		
		private EntityRef<Lead> _Lead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeadBoughtIdChanging(int value);
    partial void OnLeadBoughtIdChanged();
    partial void OnLeadIdChanging(int value);
    partial void OnLeadIdChanged();
    partial void OnBuyerIdChanging(int value);
    partial void OnBuyerIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnExchangeRateChanging(System.Nullable<decimal> value);
    partial void OnExchangeRateChanged();
    partial void OnBuyerLeadReferenceChanging(string value);
    partial void OnBuyerLeadReferenceChanged();
    partial void OnRedirectionLinkChanging(string value);
    partial void OnRedirectionLinkChanged();
    partial void OnTimeBoughtChanging(System.DateTime value);
    partial void OnTimeBoughtChanged();
    partial void OnBillingValueChanging(decimal value);
    partial void OnBillingValueChanged();
    partial void OnBillingTypeIdChanging(System.Nullable<int> value);
    partial void OnBillingTypeIdChanged();
    #endregion
		
		public LeadBought()
		{
			this._BillingType = default(EntityRef<BillingType>);
			this._Buyer = default(EntityRef<Buyer>);
			this._Lead = default(EntityRef<Lead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadBoughtId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeadBoughtId
		{
			get
			{
				return this._LeadBoughtId;
			}
			set
			{
				if ((this._LeadBoughtId != value))
				{
					this.OnLeadBoughtIdChanging(value);
					this.SendPropertyChanging();
					this._LeadBoughtId = value;
					this.SendPropertyChanged("LeadBoughtId");
					this.OnLeadBoughtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="Int NOT NULL")]
		public int LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int NOT NULL")]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					if (this._Buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="SmallMoney NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExchangeRate", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ExchangeRate
		{
			get
			{
				return this._ExchangeRate;
			}
			set
			{
				if ((this._ExchangeRate != value))
				{
					this.OnExchangeRateChanging(value);
					this.SendPropertyChanging();
					this._ExchangeRate = value;
					this.SendPropertyChanged("ExchangeRate");
					this.OnExchangeRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerLeadReference", DbType="VarChar(200)")]
		public string BuyerLeadReference
		{
			get
			{
				return this._BuyerLeadReference;
			}
			set
			{
				if ((this._BuyerLeadReference != value))
				{
					this.OnBuyerLeadReferenceChanging(value);
					this.SendPropertyChanging();
					this._BuyerLeadReference = value;
					this.SendPropertyChanged("BuyerLeadReference");
					this.OnBuyerLeadReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedirectionLink", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string RedirectionLink
		{
			get
			{
				return this._RedirectionLink;
			}
			set
			{
				if ((this._RedirectionLink != value))
				{
					this.OnRedirectionLinkChanging(value);
					this.SendPropertyChanging();
					this._RedirectionLink = value;
					this.SendPropertyChanged("RedirectionLink");
					this.OnRedirectionLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeBought", DbType="DateTime NOT NULL")]
		public System.DateTime TimeBought
		{
			get
			{
				return this._TimeBought;
			}
			set
			{
				if ((this._TimeBought != value))
				{
					this.OnTimeBoughtChanging(value);
					this.SendPropertyChanging();
					this._TimeBought = value;
					this.SendPropertyChanged("TimeBought");
					this.OnTimeBoughtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingValue", DbType="Decimal(18,0) NOT NULL")]
		public decimal BillingValue
		{
			get
			{
				return this._BillingValue;
			}
			set
			{
				if ((this._BillingValue != value))
				{
					this.OnBillingValueChanging(value);
					this.SendPropertyChanging();
					this._BillingValue = value;
					this.SendPropertyChanged("BillingValue");
					this.OnBillingValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingTypeId", DbType="Int")]
		public System.Nullable<int> BillingTypeId
		{
			get
			{
				return this._BillingTypeId;
			}
			set
			{
				if ((this._BillingTypeId != value))
				{
					if (this._BillingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BillingTypeId = value;
					this.SendPropertyChanged("BillingTypeId");
					this.OnBillingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingType_LeadBought", Storage="_BillingType", ThisKey="BillingTypeId", OtherKey="BillingTypeId", IsForeignKey=true)]
		public BillingType BillingType
		{
			get
			{
				return this._BillingType.Entity;
			}
			set
			{
				BillingType previousValue = this._BillingType.Entity;
				if (((previousValue != value) 
							|| (this._BillingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingType.Entity = null;
						previousValue.LeadBoughts.Remove(this);
					}
					this._BillingType.Entity = value;
					if ((value != null))
					{
						value.LeadBoughts.Add(this);
						this._BillingTypeId = value.BillingTypeId;
					}
					else
					{
						this._BillingTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BillingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_LeadBought", Storage="_Buyer", ThisKey="BuyerId", OtherKey="BuyerId", IsForeignKey=true)]
		public Buyer Buyer
		{
			get
			{
				return this._Buyer.Entity;
			}
			set
			{
				Buyer previousValue = this._Buyer.Entity;
				if (((previousValue != value) 
							|| (this._Buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buyer.Entity = null;
						previousValue.LeadBoughts.Remove(this);
					}
					this._Buyer.Entity = value;
					if ((value != null))
					{
						value.LeadBoughts.Add(this);
						this._BuyerId = value.BuyerId;
					}
					else
					{
						this._BuyerId = default(int);
					}
					this.SendPropertyChanged("Buyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadBought", Storage="_Lead", ThisKey="LeadId", OtherKey="LeadId", IsForeignKey=true)]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadBoughts.Remove(this);
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadBoughts.Add(this);
						this._LeadId = value.LeadId;
					}
					else
					{
						this._LeadId = default(int);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadRejected")]
	public partial class LeadRejected : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeadRejectedId;
		
		private int _LeadId;
		
		private string _Reason;
		
		private int _BuyerId;
		
		private string _BuyerLeadReference;
		
		private System.DateTime _TimeRejected;
		
		private EntityRef<Buyer> _Buyer;
		
		private EntityRef<Lead> _Lead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeadRejectedIdChanging(int value);
    partial void OnLeadRejectedIdChanged();
    partial void OnLeadIdChanging(int value);
    partial void OnLeadIdChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnBuyerIdChanging(int value);
    partial void OnBuyerIdChanged();
    partial void OnBuyerLeadReferenceChanging(string value);
    partial void OnBuyerLeadReferenceChanged();
    partial void OnTimeRejectedChanging(System.DateTime value);
    partial void OnTimeRejectedChanged();
    #endregion
		
		public LeadRejected()
		{
			this._Buyer = default(EntityRef<Buyer>);
			this._Lead = default(EntityRef<Lead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadRejectedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeadRejectedId
		{
			get
			{
				return this._LeadRejectedId;
			}
			set
			{
				if ((this._LeadRejectedId != value))
				{
					this.OnLeadRejectedIdChanging(value);
					this.SendPropertyChanging();
					this._LeadRejectedId = value;
					this.SendPropertyChanged("LeadRejectedId");
					this.OnLeadRejectedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="Int NOT NULL")]
		public int LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(150)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int NOT NULL")]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					if (this._Buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerLeadReference", DbType="VarChar(200)")]
		public string BuyerLeadReference
		{
			get
			{
				return this._BuyerLeadReference;
			}
			set
			{
				if ((this._BuyerLeadReference != value))
				{
					this.OnBuyerLeadReferenceChanging(value);
					this.SendPropertyChanging();
					this._BuyerLeadReference = value;
					this.SendPropertyChanged("BuyerLeadReference");
					this.OnBuyerLeadReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeRejected", DbType="DateTime NOT NULL")]
		public System.DateTime TimeRejected
		{
			get
			{
				return this._TimeRejected;
			}
			set
			{
				if ((this._TimeRejected != value))
				{
					this.OnTimeRejectedChanging(value);
					this.SendPropertyChanging();
					this._TimeRejected = value;
					this.SendPropertyChanged("TimeRejected");
					this.OnTimeRejectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_LeadRejected", Storage="_Buyer", ThisKey="BuyerId", OtherKey="BuyerId", IsForeignKey=true)]
		public Buyer Buyer
		{
			get
			{
				return this._Buyer.Entity;
			}
			set
			{
				Buyer previousValue = this._Buyer.Entity;
				if (((previousValue != value) 
							|| (this._Buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buyer.Entity = null;
						previousValue.LeadRejecteds.Remove(this);
					}
					this._Buyer.Entity = value;
					if ((value != null))
					{
						value.LeadRejecteds.Add(this);
						this._BuyerId = value.BuyerId;
					}
					else
					{
						this._BuyerId = default(int);
					}
					this.SendPropertyChanged("Buyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadRejected", Storage="_Lead", ThisKey="LeadId", OtherKey="LeadId", IsForeignKey=true)]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadRejecteds.Remove(this);
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadRejecteds.Add(this);
						this._LeadId = value.LeadId;
					}
					else
					{
						this._LeadId = default(int);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seller")]
	public partial class Seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SellerId;
		
		private string _SellerName;
		
		private string _Country;
		
		private bool _Active;
		
		private EntitySet<Billing> _Billings;
		
		private EntitySet<Lead> _Leads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSellerIdChanging(int value);
    partial void OnSellerIdChanged();
    partial void OnSellerNameChanging(string value);
    partial void OnSellerNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Seller()
		{
			this._Billings = new EntitySet<Billing>(new Action<Billing>(this.attach_Billings), new Action<Billing>(this.detach_Billings));
			this._Leads = new EntitySet<Lead>(new Action<Lead>(this.attach_Leads), new Action<Lead>(this.detach_Leads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this.OnSellerNameChanging(value);
					this.SendPropertyChanging();
					this._SellerName = value;
					this.SendPropertyChanged("SellerName");
					this.OnSellerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Billing", Storage="_Billings", ThisKey="SellerId", OtherKey="SellerId")]
		public EntitySet<Billing> Billings
		{
			get
			{
				return this._Billings;
			}
			set
			{
				this._Billings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Lead", Storage="_Leads", ThisKey="SellerId", OtherKey="SellerId")]
		public EntitySet<Lead> Leads
		{
			get
			{
				return this._Leads;
			}
			set
			{
				this._Leads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.Seller = this;
		}
		
		private void detach_Billings(Billing entity)
		{
			this.SendPropertyChanging();
			entity.Seller = null;
		}
		
		private void attach_Leads(Lead entity)
		{
			this.SendPropertyChanging();
			entity.Seller = this;
		}
		
		private void detach_Leads(Lead entity)
		{
			this.SendPropertyChanging();
			entity.Seller = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusId;
		
		private string _Description;
		
		private EntitySet<Lead> _Leads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Status()
		{
			this._Leads = new EntitySet<Lead>(new Action<Lead>(this.attach_Leads), new Action<Lead>(this.detach_Leads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Lead", Storage="_Leads", ThisKey="StatusId", OtherKey="StatusId")]
		public EntitySet<Lead> Leads
		{
			get
			{
				return this._Leads;
			}
			set
			{
				this._Leads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leads(Lead entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Leads(Lead entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lead")]
	public partial class Lead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeadId;
		
		private string _Gender;
		
		private string _Title;
		
		private string _Forename;
		
		private string _Surname;
		
		private System.DateTime _Dob;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _Town;
		
		private string _County;
		
		private string _Postcode;
		
		private string _HomeStatus;
		
		private System.Nullable<int> _MonthsAtAddress;
		
		private string _EmployersName;
		
		private System.Nullable<int> _MonthsAtEmployer;
		
		private string _IncomeFrequency;
		
		private int _MonthlyIncome;
		
		private string _EmploymentStatus;
		
		private bool _DirectDeposit;
		
		private string _BankAccountNumber;
		
		private string _BankSortcode;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _MobilePhone;
		
		private string _EmailAddress;
		
		private System.DateTime _ApplicationDate;
		
		private string _Source;
		
		private string _SubSource;
		
		private string _IpAddress;
		
		private string _Country;
		
		private int _SellerId;
		
		private int _LoanAmount;
		
		private string _DebitCardType;
		
		private System.DateTime _PaybackDate;
		
		private int _StatusId;
		
		private EntitySet<LeadBought> _LeadBoughts;
		
		private EntitySet<LeadRejected> _LeadRejecteds;
		
		private EntityRef<Seller> _Seller;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeadIdChanging(int value);
    partial void OnLeadIdChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDobChanging(System.DateTime value);
    partial void OnDobChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnHomeStatusChanging(string value);
    partial void OnHomeStatusChanged();
    partial void OnMonthsAtAddressChanging(System.Nullable<int> value);
    partial void OnMonthsAtAddressChanged();
    partial void OnEmployersNameChanging(string value);
    partial void OnEmployersNameChanged();
    partial void OnMonthsAtEmployerChanging(System.Nullable<int> value);
    partial void OnMonthsAtEmployerChanged();
    partial void OnIncomeFrequencyChanging(string value);
    partial void OnIncomeFrequencyChanged();
    partial void OnMonthlyIncomeChanging(int value);
    partial void OnMonthlyIncomeChanged();
    partial void OnEmploymentStatusChanging(string value);
    partial void OnEmploymentStatusChanged();
    partial void OnDirectDepositChanging(bool value);
    partial void OnDirectDepositChanged();
    partial void OnBankAccountNumberChanging(string value);
    partial void OnBankAccountNumberChanged();
    partial void OnBankSortcodeChanging(string value);
    partial void OnBankSortcodeChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnApplicationDateChanging(System.DateTime value);
    partial void OnApplicationDateChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnSubSourceChanging(string value);
    partial void OnSubSourceChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnSellerIdChanging(int value);
    partial void OnSellerIdChanged();
    partial void OnLoanAmountChanging(int value);
    partial void OnLoanAmountChanged();
    partial void OnDebitCardTypeChanging(string value);
    partial void OnDebitCardTypeChanged();
    partial void OnPaybackDateChanging(System.DateTime value);
    partial void OnPaybackDateChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    #endregion
		
		public Lead()
		{
			this._LeadBoughts = new EntitySet<LeadBought>(new Action<LeadBought>(this.attach_LeadBoughts), new Action<LeadBought>(this.detach_LeadBoughts));
			this._LeadRejecteds = new EntitySet<LeadRejected>(new Action<LeadRejected>(this.attach_LeadRejecteds), new Action<LeadRejected>(this.detach_LeadRejecteds));
			this._Seller = default(EntityRef<Seller>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(20)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="DateTime NOT NULL")]
		public System.DateTime Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="VarChar(250)")]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="VarChar(50)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postcode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeStatus", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string HomeStatus
		{
			get
			{
				return this._HomeStatus;
			}
			set
			{
				if ((this._HomeStatus != value))
				{
					this.OnHomeStatusChanging(value);
					this.SendPropertyChanging();
					this._HomeStatus = value;
					this.SendPropertyChanged("HomeStatus");
					this.OnHomeStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthsAtAddress", DbType="Int")]
		public System.Nullable<int> MonthsAtAddress
		{
			get
			{
				return this._MonthsAtAddress;
			}
			set
			{
				if ((this._MonthsAtAddress != value))
				{
					this.OnMonthsAtAddressChanging(value);
					this.SendPropertyChanging();
					this._MonthsAtAddress = value;
					this.SendPropertyChanged("MonthsAtAddress");
					this.OnMonthsAtAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployersName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployersName
		{
			get
			{
				return this._EmployersName;
			}
			set
			{
				if ((this._EmployersName != value))
				{
					this.OnEmployersNameChanging(value);
					this.SendPropertyChanging();
					this._EmployersName = value;
					this.SendPropertyChanged("EmployersName");
					this.OnEmployersNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthsAtEmployer", DbType="Int")]
		public System.Nullable<int> MonthsAtEmployer
		{
			get
			{
				return this._MonthsAtEmployer;
			}
			set
			{
				if ((this._MonthsAtEmployer != value))
				{
					this.OnMonthsAtEmployerChanging(value);
					this.SendPropertyChanging();
					this._MonthsAtEmployer = value;
					this.SendPropertyChanged("MonthsAtEmployer");
					this.OnMonthsAtEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeFrequency", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IncomeFrequency
		{
			get
			{
				return this._IncomeFrequency;
			}
			set
			{
				if ((this._IncomeFrequency != value))
				{
					this.OnIncomeFrequencyChanging(value);
					this.SendPropertyChanging();
					this._IncomeFrequency = value;
					this.SendPropertyChanged("IncomeFrequency");
					this.OnIncomeFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyIncome", DbType="Int NOT NULL")]
		public int MonthlyIncome
		{
			get
			{
				return this._MonthlyIncome;
			}
			set
			{
				if ((this._MonthlyIncome != value))
				{
					this.OnMonthlyIncomeChanging(value);
					this.SendPropertyChanging();
					this._MonthlyIncome = value;
					this.SendPropertyChanged("MonthlyIncome");
					this.OnMonthlyIncomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmploymentStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmploymentStatus
		{
			get
			{
				return this._EmploymentStatus;
			}
			set
			{
				if ((this._EmploymentStatus != value))
				{
					this.OnEmploymentStatusChanging(value);
					this.SendPropertyChanging();
					this._EmploymentStatus = value;
					this.SendPropertyChanged("EmploymentStatus");
					this.OnEmploymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectDeposit", DbType="Bit NOT NULL")]
		public bool DirectDeposit
		{
			get
			{
				return this._DirectDeposit;
			}
			set
			{
				if ((this._DirectDeposit != value))
				{
					this.OnDirectDepositChanging(value);
					this.SendPropertyChanging();
					this._DirectDeposit = value;
					this.SendPropertyChanged("DirectDeposit");
					this.OnDirectDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string BankAccountNumber
		{
			get
			{
				return this._BankAccountNumber;
			}
			set
			{
				if ((this._BankAccountNumber != value))
				{
					this.OnBankAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._BankAccountNumber = value;
					this.SendPropertyChanged("BankAccountNumber");
					this.OnBankAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankSortcode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string BankSortcode
		{
			get
			{
				return this._BankSortcode;
			}
			set
			{
				if ((this._BankSortcode != value))
				{
					this.OnBankSortcodeChanging(value);
					this.SendPropertyChanging();
					this._BankSortcode = value;
					this.SendPropertyChanged("BankSortcode");
					this.OnBankSortcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(150)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(150)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(150)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ApplicationDate
		{
			get
			{
				return this._ApplicationDate;
			}
			set
			{
				if ((this._ApplicationDate != value))
				{
					this.OnApplicationDateChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDate = value;
					this.SendPropertyChanged("ApplicationDate");
					this.OnApplicationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(150)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubSource", DbType="VarChar(150)")]
		public string SubSource
		{
			get
			{
				return this._SubSource;
			}
			set
			{
				if ((this._SubSource != value))
				{
					this.OnSubSourceChanging(value);
					this.SendPropertyChanging();
					this._SubSource = value;
					this.SendPropertyChanged("SubSource");
					this.OnSubSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="VarChar(150)")]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="Int NOT NULL")]
		public int SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					if (this._Seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanAmount", DbType="Int NOT NULL")]
		public int LoanAmount
		{
			get
			{
				return this._LoanAmount;
			}
			set
			{
				if ((this._LoanAmount != value))
				{
					this.OnLoanAmountChanging(value);
					this.SendPropertyChanging();
					this._LoanAmount = value;
					this.SendPropertyChanged("LoanAmount");
					this.OnLoanAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitCardType", DbType="VarChar(50)")]
		public string DebitCardType
		{
			get
			{
				return this._DebitCardType;
			}
			set
			{
				if ((this._DebitCardType != value))
				{
					this.OnDebitCardTypeChanging(value);
					this.SendPropertyChanging();
					this._DebitCardType = value;
					this.SendPropertyChanged("DebitCardType");
					this.OnDebitCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaybackDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaybackDate
		{
			get
			{
				return this._PaybackDate;
			}
			set
			{
				if ((this._PaybackDate != value))
				{
					this.OnPaybackDateChanging(value);
					this.SendPropertyChanging();
					this._PaybackDate = value;
					this.SendPropertyChanged("PaybackDate");
					this.OnPaybackDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadBought", Storage="_LeadBoughts", ThisKey="LeadId", OtherKey="LeadId")]
		public EntitySet<LeadBought> LeadBoughts
		{
			get
			{
				return this._LeadBoughts;
			}
			set
			{
				this._LeadBoughts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadRejected", Storage="_LeadRejecteds", ThisKey="LeadId", OtherKey="LeadId")]
		public EntitySet<LeadRejected> LeadRejecteds
		{
			get
			{
				return this._LeadRejecteds;
			}
			set
			{
				this._LeadRejecteds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Lead", Storage="_Seller", ThisKey="SellerId", OtherKey="SellerId", IsForeignKey=true)]
		public Seller Seller
		{
			get
			{
				return this._Seller.Entity;
			}
			set
			{
				Seller previousValue = this._Seller.Entity;
				if (((previousValue != value) 
							|| (this._Seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seller.Entity = null;
						previousValue.Leads.Remove(this);
					}
					this._Seller.Entity = value;
					if ((value != null))
					{
						value.Leads.Add(this);
						this._SellerId = value.SellerId;
					}
					else
					{
						this._SellerId = default(int);
					}
					this.SendPropertyChanged("Seller");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Lead", Storage="_Status", ThisKey="StatusId", OtherKey="StatusId", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Leads.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Leads.Add(this);
						this._StatusId = value.StatusId;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.Lead = this;
		}
		
		private void detach_LeadBoughts(LeadBought entity)
		{
			this.SendPropertyChanging();
			entity.Lead = null;
		}
		
		private void attach_LeadRejecteds(LeadRejected entity)
		{
			this.SendPropertyChanging();
			entity.Lead = this;
		}
		
		private void detach_LeadRejecteds(LeadRejected entity)
		{
			this.SendPropertyChanging();
			entity.Lead = null;
		}
	}
}
#pragma warning restore 1591
